import org.junit.Test;

import bignumber.BigNumber;
import bignumber.BigNumberImpl;

import static org.junit.Assert.assertEquals;

/**
 * Tests for {@link BigNumber}s.
 */
public class BigNumberTest {
  BigNumber bNum;
  BigNumber cNum;


  @Test(expected = IllegalArgumentException.class)
  //Invalid Input
  public void testInvalidInput() {
    bNum = new BigNumberImpl("z12345z6789");
  }

  @Test(expected = IllegalArgumentException.class)
  //Invalid Input
  public void testInvalidInput1() {
    bNum = new BigNumberImpl("-123456789");
  }

  @Test
  //empty input
  public void testEmptyString() {
    bNum = new BigNumberImpl("");
    assertEquals("0", bNum.toString());
  }

  @Test(expected = IllegalArgumentException.class)
  //Invalid addDigit
  public void testInvalidAddDigit() {
    bNum = new BigNumberImpl("123456789");
    bNum.addDigit(-1);
  }

  @Test(expected = IllegalArgumentException.class)
  public void testInvalidGreaterThan() {
    bNum = new BigNumberImpl("123456789");
    bNum.addDigit(10);
  }



  @Test
  public void testJustZero() {
    bNum = new BigNumberImpl("00000000000000");
    assertEquals("0", bNum.toString());
  }

  @Test
  //empty input
  public void testZeroInBeg() {
    bNum = new BigNumberImpl("0000000000000011233444333444");
    assertEquals("11233444333444", bNum.toString());
  }

  @Test
  // non empty input
  public void testNonEmptyString() {
    bNum = new BigNumberImpl("12345");
    assertEquals("12345", bNum.toString());
  }

  @Test
  //Empty test length
  public void testLengthEmpty() {
    bNum = new BigNumberImpl("");
    assertEquals("0", bNum.toString());
    assertEquals(1, bNum.length());
  }

  @Test
  public void testLengthOfZero() {
    bNum = new BigNumberImpl("000000000000000000000");
    assertEquals(1, bNum.length());
  }

  @Test
  // Non Empty test length
  public void testLengthNonEmpty() {
    bNum = new BigNumberImpl("12345678910");
    assertEquals(11, bNum.length());
  }

  @Test
  public void testLeftShiftArgZero() {
    bNum = new BigNumberImpl("123456");
    bNum.shiftLeft(0);
    assertEquals("123456", bNum.toString());
  }

  @Test
  public void testRightShiftArgZero() {
    bNum = new BigNumberImpl("123456");
    bNum.shiftRight(0);
    assertEquals("123456", bNum.toString());
  }

  @Test
  public void testRightGreaterThanLength() {
    bNum = new BigNumberImpl("123456");
    bNum.shiftRight(10);
    assertEquals("0", bNum.toString());
  }


  @Test
  public void testLeftShiftOnZero() {
    bNum = new BigNumberImpl("000000000000");
    bNum.shiftLeft(10);
    assertEquals("0", bNum.toString());
  }

  @Test
  public void testRightShiftOnZero() {
    bNum = new BigNumberImpl("000000000000");
    bNum.shiftRight(10);
    assertEquals("0", bNum.toString());
  }

  @Test
  public void testLeftShiftZeroInBeg() {
    bNum = new BigNumberImpl("000000000001234500");
    bNum.shiftLeft(2);
    assertEquals("123450000", bNum.toString());
  }

  @Test
  public void testRightShiftZeroInBeg() {
    bNum = new BigNumberImpl("000000000001234500");
    bNum.shiftRight(2);
    assertEquals("12345", bNum.toString());
  }

  @Test
  public void testLeftPositiveShift() {
    bNum = new BigNumberImpl("12345678910");
    bNum.shiftLeft(5);
    assertEquals("1234567891000000", bNum.toString());
  }

  @Test
  public void testLeftNegativeShift() {
    bNum = new BigNumberImpl("12345678910");
    bNum.shiftLeft(-5);
    assertEquals("123456", bNum.toString());
  }

  @Test
  public void testRightPositiveShift() {
    bNum = new BigNumberImpl("12345678910");
    bNum.shiftRight(5);
    assertEquals("123456", bNum.toString());
  }

  @Test
  public void testRightNegativeShift() {
    bNum = new BigNumberImpl("12345678910");
    bNum.shiftRight(-5);
    assertEquals("1234567891000000", bNum.toString());
  }

  @Test
  public void testAddDigit() {
    bNum = new BigNumberImpl("123456789");
    bNum.addDigit(9);
    bNum.addDigit(8);
    bNum.addDigit(1);
    bNum.addDigit(2);
    assertEquals("123456809", bNum.toString());
  }

  @Test
  public void testAddDigit0() {
    bNum = new BigNumberImpl("123456789");
    bNum.addDigit(0);
    assertEquals("123456789", bNum.toString());
  }

  @Test(expected = IllegalArgumentException.class)
  public void testGetDigitAtNegativeIndex() {
    bNum = new BigNumberImpl("123456789");
    bNum.getDigitAt(-2);
  }

  @Test
  public void testGetDigitAtGreaterThanLengthIndex() {
    bNum = new BigNumberImpl("123456789");
    assertEquals(0, bNum.getDigitAt(15));
  }

  @Test
  public void testGetDigitAtWithinIndex() {
    bNum = new BigNumberImpl("123456789");
    assertEquals(3, bNum.getDigitAt(6));
  }

  @Test
  public void testAddDigiGetDigit() {
    bNum = new BigNumberImpl("100000000001");
    bNum.addDigit(9);
    assertEquals("100000000010", bNum.toString());
  }

  @Test
  public void testCopy() {
    bNum = new BigNumberImpl("123456789");
    cNum = bNum.copy();
    for (int i = 0; i < bNum.length(); i++) {
      assertEquals(bNum.getDigitAt(i), cNum.getDigitAt(i));
    }
  }

  @Test
  public void testCopy2() {
    bNum = new BigNumberImpl("123456789");
    cNum = bNum.copy();
    assertEquals(true,bNum.equals(cNum));
    cNum.shiftLeft(2);
    assertEquals(false,bNum.equals(cNum));
  }

  @Test
  public void testAdd() {
    bNum = new BigNumberImpl("123456789");
    cNum = new BigNumberImpl("17472");
    assertEquals("123474261", bNum.add(cNum).toString());
  }



  @Test
  public void testAddCopy() {
    bNum = new BigNumberImpl("12345");
    cNum = bNum.copy();
    assertEquals(new BigNumberImpl("24690").toString(), bNum.add(cNum).toString());
  }

  @Test
  public void testAddSame() {
    bNum = new BigNumberImpl("12345");
    cNum = new BigNumberImpl("12345");
    assertEquals(new BigNumberImpl("24690").toString(), bNum.add(cNum).toString());
  }


  @Test
  public void testCompareWhenNotSame1() {
    bNum = new BigNumberImpl("12345");
    cNum = new BigNumberImpl("12345678910");
    assertEquals(1, cNum.compareTo(bNum));
  }

  @Test
  public void testCompareWhenNotSame2() {
    bNum = new BigNumberImpl("12345");
    cNum = new BigNumberImpl("12345678910");
    assertEquals(-1, bNum.compareTo(cNum));
  }

  @Test
  public void testCompareWhenSame() {
    bNum = new BigNumberImpl("12345");
    cNum = bNum.copy();
    assertEquals(0, bNum.compareTo(cNum));
  }

  @Test
  public void testEquals() {
    bNum = new BigNumberImpl("12345");
    cNum = bNum.copy();
    assertEquals(bNum, cNum);
  }

  @Test
  public void testNotEquals() {
    bNum = new BigNumberImpl("12345");
    cNum = new BigNumberImpl("12345678910");
    assertEquals(false, bNum.equals(cNum));
  }


  @Test
  public void testaddDigit() {
    bNum = new BigNumberImpl("123456");
    bNum.addDigit(4);
    assertEquals("123460", bNum.toString());
  }

  @Test
  public void testAddNew() {
    bNum = new BigNumberImpl("19588");
    cNum = new BigNumberImpl("927");
    assertEquals("20515", bNum.add(cNum).toString());
  }

  @Test
  public void testLeftShiftMultipleCheckTime() {
    bNum = new BigNumberImpl("5388484");
    bNum.shiftLeft(1000);
    assertEquals("5388484000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "0000000000", bNum.toString());
  }

  @Test
  public void testAddNull() {
    bNum = new BigNumberImpl("5388484");
    cNum = new BigNumberImpl("");
    assertEquals("5388484", bNum.add(cNum).toString());
  }

  @Test
  public void testAddNull1() {
    bNum = new BigNumberImpl("0");
    cNum = new BigNumberImpl("");
    assertEquals("0", bNum.add(cNum).toString());
  }

  @Test
  public void testLeftShiftMultipleCheckTime1() {
    bNum = new BigNumberImpl("5388484");
    bNum.shiftLeft(10000);
    assertEquals("5388484000000000000000000000"
            + "0000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "00000000000"
            + "0000000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000"
            + "00000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000"
            + "0000000000000000000", bNum.toString());
  }

  @Test
  public void testRightShiftMoreThan1000() {
    bNum = new BigNumberImpl("111111122223345"
            + "6789056784351234578901022434499775311111112222334567"
            + "8905678435123457890102243449977531111111222233456789"
            + "056784351234578901022434499775311111112222334567890"
            + "56784351234578901022434499775311111112222334567890567"
            + "843512345789010224344997753"
            + "843512345789010224344997753"
            + "843512345789010224344997753"
            + "843512345789010224344997753");
    bNum.shiftRight(3000);
    assertEquals("0", bNum.toString());
  }

  @Test
  public void testNegativeLeftShift() {
    bNum = new BigNumberImpl("111111122223345111111122223345"
            + "67890567843512345789010224344997753");
    bNum.shiftLeft(-1000);
    assertEquals("0", bNum.toString());
  }

  @Test
  public void testLengthOnBingString() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");

    cNum = new BigNumberImpl("2260652114806043681240156550681012"
            + "624352794616567178357360141408801464357457081154445549141347432"
            + "537886723878305555179467108337745523115803712883011752602890059"
            + "87448125812671221339536345812270150536534248728006689354764651554"
            + "798964832966006971537313229454157322746876830655297562811910066764"
            + "8328667716492636898130712019824153147380711468163928754498804363443"
            + "2394250336320970902672875039204996873816211127257990508609090063366"
            + "7110476434059021995017830230543753737371813132035388078884327326594"
            + "63193629478847907552012527876755585330137895679245128210967901087350"
            + "111624701595869578516452616756194514700073827767559915221165268785006"
            + "4026166828740732780356302058103695243159699679414035503541199641489907"
            + "65544182444556779442897423268503014793964297006504352532678382890130"
            + "652956923246748181775663217594780618876346534492424168575952806615334016");
    assertEquals(2329, bNum.length());
    assertEquals(839, cNum.length());

  }

  @Test
  public void testCompareOnBingString() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");

    cNum = new BigNumberImpl("2260652114806043681240156550681012"
            + "624352794616567178357360141408801464357457081154445549141347432"
            + "537886723878305555179467108337745523115803712883011752602890059"
            + "87448125812671221339536345812270150536534248728006689354764651554"
            + "798964832966006971537313229454157322746876830655297562811910066764"
            + "8328667716492636898130712019824153147380711468163928754498804363443"
            + "2394250336320970902672875039204996873816211127257990508609090063366"
            + "7110476434059021995017830230543753737371813132035388078884327326594"
            + "63193629478847907552012527876755585330137895679245128210967901087350"
            + "111624701595869578516452616756194514700073827767559915221165268785006"
            + "4026166828740732780356302058103695243159699679414035503541199641489907"
            + "65544182444556779442897423268503014793964297006504352532678382890130"
            + "652956923246748181775663217594780618876346534492424168575952806615334016");
    // assertEquals("22",bNum.add(cNum).toString());
    assertEquals(1, bNum.compareTo(cNum));
    assertEquals(-1, cNum.compareTo(bNum));
  }

  @Test
  public void testCompareEqualOnBigString() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");

    cNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");
    // assertEquals("22",bNum.add(cNum).toString());
    assertEquals(0, bNum.compareTo(cNum));
    assertEquals(0, cNum.compareTo(bNum));
  }

  @Test
  public void testEqualsEqualOnBigString() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");

    cNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");
    assertEquals(true, bNum.equals(cNum));
  }

  @Test
  public void testEqualsBingString() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");

    cNum = new BigNumberImpl("2260652114806043681240156550681012"
            + "624352794616567178357360141408801464357457081154445549141347432"
            + "537886723878305555179467108337745523115803712883011752602890059"
            + "87448125812671221339536345812270150536534248728006689354764651554"
            + "798964832966006971537313229454157322746876830655297562811910066764"
            + "8328667716492636898130712019824153147380711468163928754498804363443"
            + "2394250336320970902672875039204996873816211127257990508609090063366"
            + "7110476434059021995017830230543753737371813132035388078884327326594"
            + "63193629478847907552012527876755585330137895679245128210967901087350"
            + "111624701595869578516452616756194514700073827767559915221165268785006"
            + "4026166828740732780356302058103695243159699679414035503541199641489907"
            + "65544182444556779442897423268503014793964297006504352532678382890130"
            + "652956923246748181775663217594780618876346534492424168575952806615334016");

    assertEquals(false, bNum.equals(cNum));
  }

  @Test
  public void testDigitAtBingString() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");

    assertEquals(6, bNum.getDigitAt(0));

    assertEquals(4, bNum.getDigitAt(2328));

    assertEquals(0, bNum.getDigitAt(2329));
  }

  @Test(expected = IllegalArgumentException.class)
  public void testDigitAtBingStringNegative() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");

    assertEquals(6, bNum.getDigitAt(-5));

  }

  @Test
  public void testLeftShiftBigString1() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");
    bNum.shiftLeft(1000);
    assertEquals("4392188010720714900076973426677408"
                    + "3098703674408814065288726326279157360324269541663242371"
                    + "8762610810597454795874992598245675878231170087820296462"
                    + "51306215100191505281246609416538754867411283084707235627"
                    + "112017676905031196641486012427315884971334963985674627896"
                    + "1899348470380980357986778511438839667407450843475705180004"
                    + "152102225251906442202177515521891284577969870508550820850"
                    + "72778631715531098655792651930169695669792898292658825647"
                    + "058486188631603672707429697549402387000546240046593153556"
                    + "138431766148695819562354619255415211446238299764201234324"
                    + "142743036056256984824312869665281423279464687190505821759"
                    + "057090336409848713918276586346246658146460974081940677187"
                    + "92465720144210398342573678098156490097949410709679811644"
                    + "67187724819802008683512632731607055667234835090623879590"
                    + "45517905920557312329533189741552286990107189271943735146"
                    + "861180055049631414253677534736472764490862270662479004869"
                    + "45109952048412541770254628036196479491418394559047384381"
                    + "61016843674129040168292407520584100727769929509174994128208"
                    + "1428940696065796955768681282962093600948989714686524180325"
                    + "44130234967740430117878471767190876549954313712652955131224"
                    + "26440573399512538051867341437684713361329666072311567105439"
                    + "8438612773110491640035927670644939944468362173311929517268338"
                    + "66691081780524956104075277386207113695721913329525199409405972"
                    + "9647481864455366857040580471681655061455776947855180782781"
                    + "961590434100543148034404902374887926727081307482444955055736"
                    + "17968946066890630208160487543541998131770794189105910865649721"
                    + "30673336488746902345996047912056523121635956935523300307604947"
                    + "02231881341423058371616619034209033084606584617077806398488849"
                    + "433515146031775075366840497059373148480373732307485173173276590"
                    + "6095644799033624543729277558556619133894747987122958792381875828"
                    + "3605717108587013678996613922341383536115454826808223569251518561"
                    + "6444673185040240380722242294412128987792940215780582868398984658140653"
                    + "489309072588996807587563138040194852482987391"
                    + "17271804210490937270574967315196974372926219515726104026869501995846083"
                    + "71160672126342108641090126914570237978325294384897171581677144621458146"
                    + "3201419455095890277452146981195431158937466279873173609960452764775919961"
                    + "07539514501447550707341964059465452371189511871262372416279089688630"
                    + "7689703559458958073953072106842873292016602507355668838391292461858867854"
                    + "82915135005686668977837039298701294923757318647142077365695637379116"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000",
            bNum.toString());
  }

  @Test
  public void testLeftShiftBigString2() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");
    bNum.shiftLeft(-2329);
    assertEquals("0", bNum.toString());
  }

  @Test
  public void testLeftShiftBigString3() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");
    bNum.shiftLeft(-2327);
    assertEquals("43", bNum.toString());
  }

  @Test
  public void testRightShiftBigString() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");
    bNum.shiftRight(2329);
    assertEquals("0", bNum.toString());
  }

  @Test
  public void testRightShiftBigString1() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");
    bNum.shiftRight(2324);
    assertEquals("43921", bNum.toString());
  }


  @Test
  public void testRightShiftBigString2() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");
    bNum.shiftRight(-1000);
    assertEquals("4392188010720714900076973426677408"
                    + "3098703674408814065288726326279157360324269541663242371"
                    + "8762610810597454795874992598245675878231170087820296462"
                    + "51306215100191505281246609416538754867411283084707235627"
                    + "112017676905031196641486012427315884971334963985674627896"
                    + "1899348470380980357986778511438839667407450843475705180004"
                    + "152102225251906442202177515521891284577969870508550820850"
                    + "72778631715531098655792651930169695669792898292658825647"
                    + "058486188631603672707429697549402387000546240046593153556"
                    + "138431766148695819562354619255415211446238299764201234324"
                    + "142743036056256984824312869665281423279464687190505821759"
                    + "057090336409848713918276586346246658146460974081940677187"
                    + "92465720144210398342573678098156490097949410709679811644"
                    + "67187724819802008683512632731607055667234835090623879590"
                    + "45517905920557312329533189741552286990107189271943735146"
                    + "861180055049631414253677534736472764490862270662479004869"
                    + "45109952048412541770254628036196479491418394559047384381"
                    + "61016843674129040168292407520584100727769929509174994128208"
                    + "1428940696065796955768681282962093600948989714686524180325"
                    + "44130234967740430117878471767190876549954313712652955131224"
                    + "26440573399512538051867341437684713361329666072311567105439"
                    + "8438612773110491640035927670644939944468362173311929517268338"
                    + "66691081780524956104075277386207113695721913329525199409405972"
                    + "9647481864455366857040580471681655061455776947855180782781"
                    + "961590434100543148034404902374887926727081307482444955055736"
                    + "17968946066890630208160487543541998131770794189105910865649721"
                    + "30673336488746902345996047912056523121635956935523300307604947"
                    + "02231881341423058371616619034209033084606584617077806398488849"
                    + "433515146031775075366840497059373148480373732307485173173276590"
                    + "6095644799033624543729277558556619133894747987122958792381875828"
                    + "3605717108587013678996613922341383536115454826808223569251518561"
                    + "6444673185040240380722242294412128987792940215780582868398984658140653"
                    + "489309072588996807587563138040194852482987391"
                    + "17271804210490937270574967315196974372926219515726104026869501995846083"
                    + "71160672126342108641090126914570237978325294384897171581677144621458146"
                    + "3201419455095890277452146981195431158937466279873173609960452764775919961"
                    + "07539514501447550707341964059465452371189511871262372416279089688630"
                    + "7689703559458958073953072106842873292016602507355668838391292461858867854"
                    + "82915135005686668977837039298701294923757318647142077365695637379116"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000"
                    + "00000000000000000000000000000000000000000000000000",
            bNum.toString());
  }

  @Test
  public void testRightShift() {
    bNum = new BigNumberImpl("123456789");
    bNum.shiftRight(100000);
    assertEquals("0", bNum.toString());
  }

  @Test
  public void testLeftShift() {
    bNum = new BigNumberImpl("0");
    bNum.shiftLeft(100000);
    assertEquals("0", bNum.toString());
  }

  @Test
  public void testCopyAndBigDigitBigString() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");

    cNum = bNum.copy();
    for (int i = 0; i < cNum.length(); i++) {
      assertEquals(cNum.getDigitAt(i), bNum.getDigitAt(i));
    }


  }

  @Test
  public void testAddDigitBigString() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");

    bNum.addDigit(1);
    bNum.addDigit(2);
    bNum.addDigit(3);
    bNum.addDigit(4);
    bNum.addDigit(5);
    bNum.addDigit(6);
    bNum.addDigit(7);
    bNum.addDigit(8);
    bNum.addDigit(9);

    assertEquals("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279"
            + "089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "829151350056866689778370392987012949237573186471420773656956"
            + "37379161", bNum.toString());

  }

  @Test
  public void testAddTwoBig() {
    bNum = new BigNumberImpl("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "82915135005686668977837039298701294923757318647142077365695637379116");

    cNum = new BigNumberImpl("12345");

    assertEquals("4392188010720714900076973426677408"
            + "3098703674408814065288726326279157360324269541663242371"
            + "8762610810597454795874992598245675878231170087820296462"
            + "51306215100191505281246609416538754867411283084707235627"
            + "112017676905031196641486012427315884971334963985674627896"
            + "1899348470380980357986778511438839667407450843475705180004"
            + "152102225251906442202177515521891284577969870508550820850"
            + "72778631715531098655792651930169695669792898292658825647"
            + "058486188631603672707429697549402387000546240046593153556"
            + "138431766148695819562354619255415211446238299764201234324"
            + "142743036056256984824312869665281423279464687190505821759"
            + "057090336409848713918276586346246658146460974081940677187"
            + "92465720144210398342573678098156490097949410709679811644"
            + "67187724819802008683512632731607055667234835090623879590"
            + "45517905920557312329533189741552286990107189271943735146"
            + "861180055049631414253677534736472764490862270662479004869"
            + "45109952048412541770254628036196479491418394559047384381"
            + "61016843674129040168292407520584100727769929509174994128208"
            + "1428940696065796955768681282962093600948989714686524180325"
            + "44130234967740430117878471767190876549954313712652955131224"
            + "26440573399512538051867341437684713361329666072311567105439"
            + "8438612773110491640035927670644939944468362173311929517268338"
            + "66691081780524956104075277386207113695721913329525199409405972"
            + "9647481864455366857040580471681655061455776947855180782781"
            + "961590434100543148034404902374887926727081307482444955055736"
            + "17968946066890630208160487543541998131770794189105910865649721"
            + "30673336488746902345996047912056523121635956935523300307604947"
            + "02231881341423058371616619034209033084606584617077806398488849"
            + "433515146031775075366840497059373148480373732307485173173276590"
            + "6095644799033624543729277558556619133894747987122958792381875828"
            + "3605717108587013678996613922341383536115454826808223569251518561"
            + "6444673185040240380722242294412128987792940215780582868398984658140653"
            + "489309072588996807587563138040194852482987391"
            + "17271804210490937270574967315196974372926219515726104026869501995846083"
            + "71160672126342108641090126914570237978325294384897171581677144621458146"
            + "3201419455095890277452146981195431158937466279873173609960452764775919961"
            + "07539514501447550707341964059465452371189511871262372416279089688630"
            + "7689703559458958073953072106842873292016602507355668838391292461858867854"
            + "829151350056866689778370392987012949237573186471"
            + "42077365695637391461", bNum.add(cNum).toString());

  }

  @Test
  public void testAddDigitBigNumber() {
    bNum = new BigNumberImpl("56899");
    bNum.addDigit(5);
    assertEquals("56904", bNum.toString());
  }

  @Test
  public void testAddDigitBigNumber1() {
    bNum = new BigNumberImpl("9999");
    bNum.addDigit(1);
    assertEquals("10000", bNum.toString());
  }

  @Test
  public void testAddDigitBigNumber2() {
    bNum = new BigNumberImpl("501303");
    bNum.addDigit(1);
    assertEquals("501304", bNum.toString());
  }

  @Test
  public void testAddDigitSingleDigit() {
    bNum = new BigNumberImpl("1");
    bNum.addDigit(1);
    assertEquals("2", bNum.toString());
  }

  @Test
  public void testAddDigitEmptyNode() {
    bNum = new BigNumberImpl("");
    bNum.addDigit(2);
    assertEquals("2", bNum.toString());
  }

  @Test
  public void testAddDigitSingleDigit1() {
    bNum = new BigNumberImpl("9");
    bNum.addDigit(2);
    assertEquals("11", bNum.toString());
  }

  @Test
  public void leftShift1() {
    bNum = new BigNumberImpl("0000000000030000000000");
    bNum.shiftLeft(10);
    assertEquals("300000000000000000000", bNum.toString());
  }


  @Test
  public void testMixed() {
    BigNumber bNum = new BigNumberImpl();
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("0"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("9"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("8"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("7"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("6"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("5"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("4"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("3"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("2"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("1"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("6"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("9"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("8"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("8"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("7"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("6"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("7"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("5"));
    bNum.shiftLeft(1);

    bNum = bNum.add(new BigNumberImpl("9"));
    bNum.shiftLeft(1);

    assertEquals("9876543216988767590", bNum.toString());
    cNum = new BigNumberImpl("12");
    bNum = bNum.add(cNum);
    assertEquals("9876543216988767602", bNum.toString());
    bNum.addDigit(1);
    bNum.addDigit(2);
    bNum.addDigit(3);
    bNum.addDigit(4);
    assertEquals("9876543216988767612", bNum.toString());
    int len = bNum.length();
    for (int i = 0; i < len; i++) {
      assertEquals(bNum.getDigitAt(i),
              Integer.parseInt(bNum.toString().substring(len - 1 - i, len - i)));
    }

  }


}